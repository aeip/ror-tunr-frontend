{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marcupio/Desktop/seir/unit4/rails-mini-project/tunr-client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Header } from './components/Header';\nimport { Playlists } from './components/Playlists';\nimport { Favorites } from './components/Favorites';\nimport { New } from './components/New';\n\nfunction App() {\n  _s();\n\n  const [playlists, setPlaylists] = useState([]);\n  const [songs, setSongs] = useState([]);\n\n  const makeAPICallSongs = async () => {\n    try {\n      const res = await fetch('http://localhost:3000/playlists');\n      const json = await res.json();\n      setPlaylists(json);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const makeAPICall = async () => {\n    try {\n      const res = await fetch('http://localhost:3000/songs');\n      const json = await res.json();\n      setSongs(json);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  useEffect(() => {\n    makeAPICall();\n    makeAPICallSongs();\n  }, []);\n  const emptySong = {\n    title: '',\n    artist: '',\n    time: '',\n    favorite: false\n  };\n  const emptyPlaylist = {\n    title: '',\n    description: ''\n  };\n\n  const handleFavorites = () => {};\n\n  const handleCreate = (song, id) => {\n    fetch('http://localhost:3000/playlists/' + id + '/songs', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(song)\n    }).then(() => {\n      makeAPICall();\n    });\n  };\n\n  const handleDelete = song => {\n    fetch('http://localhost:3000/playlists/5/songs/' + song.id, {\n      method: 'delete',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(() => {\n      makeAPICall();\n    });\n  };\n\n  const handleCreatePlaylist = playlist => {\n    fetch('http://localhost:3000/playlists', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(playlist)\n    }).then(() => {\n      makeAPICall();\n    });\n  };\n\n  const handleDeletePlaylist = playlist => {\n    fetch('http://localhost:3000/playlists/' + playlist.id, {\n      method: 'delete',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(() => {\n      makeAPICall();\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Playlists, {\n        emptyPlaylist: emptyPlaylist,\n        emptySong: emptySong,\n        handleCreate: handleCreate,\n        handleDeletePlaylist: handleDeletePlaylist,\n        handleCreatePlaylist: handleCreatePlaylist,\n        playlists: playlists,\n        setPlaylists: setPlaylists,\n        handleDelete: handleDelete,\n        handleFavorites: handleFavorites\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Favorites, {\n        songs: songs,\n        handleDelete: handleDelete,\n        handleFavorites: handleFavorites\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"P6zRYncZSZaJL8rPTCw+3BSoMGQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/marcupio/Desktop/seir/unit4/rails-mini-project/tunr-client/src/App.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Switch","Route","Header","Playlists","Favorites","New","App","playlists","setPlaylists","songs","setSongs","makeAPICallSongs","res","fetch","json","err","console","error","makeAPICall","emptySong","title","artist","time","favorite","emptyPlaylist","description","handleFavorites","handleCreate","song","id","method","headers","body","JSON","stringify","then","handleDelete","handleCreatePlaylist","playlist","handleDeletePlaylist"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Header } from './components/Header';\nimport { Playlists } from './components/Playlists';\nimport { Favorites } from './components/Favorites';\nimport { New } from './components/New';\n\nfunction App() {\n  const [playlists, setPlaylists] = useState([]);\n  const [songs, setSongs] = useState([]);\n\tconst makeAPICallSongs = async () => {\n\t\ttry {\n\t\t\tconst res = await fetch('http://localhost:3000/playlists');\n\t\t\tconst json = await res.json();\n\t\t\tsetPlaylists(json);\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t}\n  };\n  \tconst makeAPICall = async () => {\n\t\ttry {\n\t\t\tconst res = await fetch('http://localhost:3000/songs');\n\t\t\tconst json = await res.json();\n\t\t\tsetSongs(json);\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t}\n\t};\n\tuseEffect(() => {\n    makeAPICall();\n    makeAPICallSongs();\n\t}, []);\n\tconst emptySong = {\n\t\ttitle: '',\n\t\tartist: '',\n\t\ttime: '',\n\t\tfavorite: false,\n  };\n  const emptyPlaylist = {\n    title: '',\n    description: ''\n  }\n\tconst handleFavorites = () => {};\n\tconst handleCreate = (song, id) => {\n\t\tfetch('http://localhost:3000/playlists/' + id + '/songs', {\n\t\t\tmethod: 'post',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(song),\n    }).then(() => {\n      makeAPICall();\n    })\n    \n\t};\n\tconst handleDelete = (song) => {\n\t\tfetch('http://localhost:3000/playlists/5/songs/' + song.id, {\n\t\t\tmethod: 'delete',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t}).then(() => {\n\t\t\tmakeAPICall();\n\t\t});\n  };\n  const handleCreatePlaylist = (playlist) => {\n    \t\tfetch('http://localhost:3000/playlists', {\n\t\t\t\t\tmethod: 'post',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify(playlist),\n\t\t\t\t}).then(() => {\n\t\t\t\t\tmakeAPICall();\n\t\t\t\t});\n  }\n  const handleDeletePlaylist = (playlist) => {\n    \t\tfetch('http://localhost:3000/playlists/' + playlist.id, {\n\t\t\t\t\tmethod: 'delete',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t}).then(() => {\n\t\t\t\t\tmakeAPICall();\n\t\t\t\t});\n  }\n\treturn (\n\t\t<Router>\n\t\t\t<div className='App'>\n\t\t\t\t<Header />\n\t\t\t\t<Playlists emptyPlaylist={emptyPlaylist} emptySong={emptySong} handleCreate={handleCreate} handleDeletePlaylist={handleDeletePlaylist} handleCreatePlaylist={handleCreatePlaylist} playlists={playlists} setPlaylists={setPlaylists}\n\t\t\t\t\thandleDelete={handleDelete}\n\t\t\t\t\thandleFavorites={handleFavorites}\n\t\t\t\t/>\n\t\t\t\t<Favorites songs={songs}\n\t\t\t\t\thandleDelete={handleDelete}\n\t\t\t\t\thandleFavorites={handleFavorites}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}